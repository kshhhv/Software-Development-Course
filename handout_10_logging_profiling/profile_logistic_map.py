"""
It generates an animation of the logistic map
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

import sys
import logging
from line_profiler import profile

logging.basicConfig(
    #stream=sys.stdout, 
    filename='logistic_map.log', 
    level=logging.DEBUG)

logger = logging.getLogger("my_logger")

@profile
def logistic_map(x0, r, n):
    
    """
    Computes the logistic map sequence for a given initial condition, growth rate and number or iterations

    x_{n+1} = r * x_n * (1 - x_n)

    Paramerters
    -----------
    x0: float
        Initial value of the sequence
    r: float
        Growth rate parameter
    n: int
        Number of iterations to calculate

    Returns
    -------

    xs: array of length n
        Arrays of the values generated by the logistic map

    """

    xs = np.empty((n))
    xs[0] = x0

    for i in range(1, n):

        xn = xs[i-1]
        xnp1 = r*xn*(1-xn)
        xs[i] = xnp1

        #xnp1 = r*xs[i-1]*(1-xs[i-1])
        #xs[i] = r*xs[i-1]*(1-xs[i-1])

    return xs


def plot_animate(xks):

    fig, ax = plt.subplots()

    def update(n):
        ax.clear()
        ax.set_title(f"N: {n}")

        ax.set_xlim(0, 4)
        ax.set_ylim(0, 1)
        ax.set_xlabel('r')
        ax.set_ylabel('xn')

        for x_index, x in enumerate(x_values):
            ax.plot(r_values, xks[x_index, :, n], linewidth=0.1, c='k')

    anim = animation.FuncAnimation(fig, update, frames=50, interval=100)

    plt.show()


if __name__ == '__main__':

    n = 50

    x_values = np.random.uniform(0, 1, n)

    r_values = np.linspace(0, 4, n)

    xks = np.empty((n, n, n))


    for x_index, x in enumerate(x_values):

        for r_index, r in enumerate(r_values):

            xs = logistic_map(x, r, n)

            # Stupid try to get warning to log
            try:
                check = 1/(x_index*r_index)

            except ZeroDivisionError as e:

                # The first parameter is numeric value of level, check logging doc
                logger.log(30, f'\n {e} at {x_index}, {r_index}')

            xks[x_index, r_index, :] = xs

    plot_animate(xks)
